name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: onya-chatbot

jobs:
  # Build and Push Docker Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [shared-services, customer-bff, customer-app]
    
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: |
            ${{ matrix.service == 'shared-services' && 'services/shared-services/Dockerfile' || 
                matrix.service == 'customer-bff' && 'bffs/customer-bff/Dockerfile' ||
                'apps/customer-app/Dockerfile' }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom-${{ matrix.service }}.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.spdx.json

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    environment:
      name: staging
      url: https://staging.onya.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name onya-staging-cluster

      - name: Deploy database migrations
        run: |
          # Create migration job
          envsubst < k8s/staging/migration-job.yaml | kubectl apply -f -
          
          # Wait for migration to complete
          kubectl wait --for=condition=complete job/onya-db-migration --timeout=300s
        env:
          IMAGE_TAG: ${{ github.sha }}
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Deploy to Kubernetes
        run: |
          # Update image tags in deployment files
          find k8s/staging -name "*.yaml" -exec envsubst < {} \; | kubectl apply -f -
          
          # Wait for deployments to be ready
          kubectl rollout status deployment/onya-shared-services --timeout=300s
          kubectl rollout status deployment/onya-customer-bff --timeout=300s
          kubectl rollout status deployment/onya-customer-app --timeout=300s
        env:
          IMAGE_TAG: ${{ github.sha }}
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.STAGING_JWT_REFRESH_SECRET }}

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Get service URLs
          SHARED_SERVICES_URL=$(kubectl get svc onya-shared-services -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          CUSTOMER_BFF_URL=$(kubectl get svc onya-customer-bff -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Run smoke tests
          curl -f http://${SHARED_SERVICES_URL}/health || exit 1
          curl -f http://${CUSTOMER_BFF_URL}/health || exit 1
          
          echo "Staging deployment successful!"
          echo "Shared Services: http://${SHARED_SERVICES_URL}"
          echo "Customer BFF: http://${CUSTOMER_BFF_URL}"

      - name: Run staging tests
        run: |
          cd tests/staging
          npm ci
          npm test
        env:
          STAGING_URL: https://staging.onya.com
          API_TOKEN: ${{ secrets.STAGING_API_TOKEN }}

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Staging Deployment ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            URL: https://staging.onya.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    environment:
      name: production
      url: https://onya.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name onya-production-cluster

      - name: Create backup
        run: |
          # Backup current deployment
          kubectl get deployments -o yaml > backup-deployments-$(date +%Y%m%d-%H%M%S).yaml
          
          # Backup database
          kubectl create job db-backup-$(date +%Y%m%d-%H%M%S) --from=cronjob/db-backup

      - name: Deploy database migrations
        run: |
          # Create migration job
          envsubst < k8s/production/migration-job.yaml | kubectl apply -f -
          
          # Wait for migration to complete
          kubectl wait --for=condition=complete job/onya-db-migration --timeout=300s
        env:
          IMAGE_TAG: ${{ github.event.inputs.version || github.sha }}
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment
          export ENVIRONMENT_SUFFIX="-green"
          find k8s/production -name "*.yaml" -exec envsubst < {} \; | kubectl apply -f -
          
          # Wait for green deployment to be ready
          kubectl rollout status deployment/onya-shared-services-green --timeout=600s
          kubectl rollout status deployment/onya-customer-bff-green --timeout=600s
          kubectl rollout status deployment/onya-customer-app-green --timeout=600s
          
          # Run health checks on green environment
          sleep 60
          
          # Switch traffic to green (update service selectors)
          kubectl patch service onya-shared-services -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service onya-customer-bff -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service onya-customer-app -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait and verify
          sleep 30
          
          # Clean up blue environment
          kubectl delete deployment onya-shared-services || true
          kubectl delete deployment onya-customer-bff || true
          kubectl delete deployment onya-customer-app || true
          
          # Rename green to blue for next deployment
          kubectl patch deployment onya-shared-services-green -p '{"metadata":{"name":"onya-shared-services"}}'
          kubectl patch deployment onya-customer-bff-green -p '{"metadata":{"name":"onya-customer-bff"}}'
          kubectl patch deployment onya-customer-app-green -p '{"metadata":{"name":"onya-customer-app"}}'
        env:
          IMAGE_TAG: ${{ github.event.inputs.version || github.sha }}
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          REDIS_URL: ${{ secrets.PRODUCTION_REDIS_URL }}
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.PRODUCTION_JWT_REFRESH_SECRET }}
          OPENAI_API_KEY: ${{ secrets.PRODUCTION_OPENAI_API_KEY }}

      - name: Run production smoke tests
        run: |
          # Run comprehensive health checks
          curl -f https://onya.com/health || exit 1
          curl -f https://api.onya.com/health || exit 1
          
          # Run smoke tests
          cd tests/production
          npm ci
          npm test
        env:
          PRODUCTION_URL: https://onya.com
          API_TOKEN: ${{ secrets.PRODUCTION_API_TOKEN }}

      - name: Update monitoring dashboards
        run: |
          # Update Grafana dashboards with new version info
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{\"version\": \"${{ github.event.inputs.version || github.sha }}\", \"deployed_at\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" \
            https://monitoring.onya.com/api/annotations

      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release
            
            - Deployed to production on $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            - Docker images: `${{ github.sha }}`
            
            ## Deployment Summary
            
            - ✅ Database migrations applied
            - ✅ Blue-green deployment completed
            - ✅ Smoke tests passed
            - ✅ Monitoring updated
            
            ## Service URLs
            
            - Application: https://onya.com
            - API: https://api.onya.com
            - Status: https://status.onya.com
          draft: false
          prerelease: false

      - name: Notify production deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#production-deployments'
          text: |
            🚀 Production Deployment ${{ job.status }}
            Version: ${{ github.event.inputs.version || github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            URL: https://onya.com
            
            ${{ job.status == 'success' && '✅ All systems operational' || '❌ Deployment failed - check logs' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback Job
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    
    environment:
      name: production
      url: https://onya.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name onya-production-cluster

      - name: Rollback deployment
        run: |
          # Rollback to previous version
          kubectl rollout undo deployment/onya-shared-services
          kubectl rollout undo deployment/onya-customer-bff
          kubectl rollout undo deployment/onya-customer-app
          
          # Wait for rollback to complete
          kubectl rollout status deployment/onya-shared-services --timeout=300s
          kubectl rollout status deployment/onya-customer-bff --timeout=300s
          kubectl rollout status deployment/onya-customer-app --timeout=300s

      - name: Verify rollback
        run: |
          # Run health checks
          curl -f https://onya.com/health || exit 1
          curl -f https://api.onya.com/health || exit 1

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#production-deployments",
              "attachments": [{
                "color": "warning",
                "title": "🔄 Production Rollback Completed",
                "text": "Deployment failed and system has been rolled back to previous version",
                "fields": [
                  {
                    "title": "Failed Version",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Triggered By",
                    "value": "${{ github.actor }}",
                    "short": true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}