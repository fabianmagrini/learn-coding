name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: onya-chatbot

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [shared-services, customer-bff, customer-app]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install service dependencies
        run: |
          if [ "${{ matrix.service }}" = "shared-services" ]; then
            cd services/shared-services && npm ci
          elif [ "${{ matrix.service }}" = "customer-bff" ]; then
            cd bffs/customer-bff && npm ci
          elif [ "${{ matrix.service }}" = "customer-app" ]; then
            cd apps/customer-app && npm ci
          fi

      - name: Run ESLint
        run: |
          if [ "${{ matrix.service }}" = "shared-services" ]; then
            cd services/shared-services && npm run lint
          elif [ "${{ matrix.service }}" = "customer-bff" ]; then
            cd bffs/customer-bff && npm run lint
          elif [ "${{ matrix.service }}" = "customer-app" ]; then
            cd apps/customer-app && npm run lint
          fi

      - name: Run TypeScript check
        run: |
          if [ "${{ matrix.service }}" = "shared-services" ]; then
            cd services/shared-services && npm run typecheck
          elif [ "${{ matrix.service }}" = "customer-bff" ]; then
            cd bffs/customer-bff && npm run typecheck
          elif [ "${{ matrix.service }}" = "customer-app" ]; then
            cd apps/customer-app && npm run type-check
          fi

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [shared-services, customer-bff, customer-app]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: onya_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install service dependencies
        run: |
          if [ "${{ matrix.service }}" = "shared-services" ]; then
            cd services/shared-services && npm ci
          elif [ "${{ matrix.service }}" = "customer-bff" ]; then
            cd bffs/customer-bff && npm ci
          elif [ "${{ matrix.service }}" = "customer-app" ]; then
            cd apps/customer-app && npm ci
          fi

      - name: Setup database for shared-services
        if: matrix.service == 'shared-services'
        run: |
          cd services/shared-services
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/onya_test

      - name: Run tests
        run: |
          if [ "${{ matrix.service }}" = "shared-services" ]; then
            cd services/shared-services && npm test
          elif [ "${{ matrix.service }}" = "customer-bff" ]; then
            cd bffs/customer-bff && npm test
          elif [ "${{ matrix.service }}" = "customer-app" ]; then
            cd apps/customer-app && npm test
          fi
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/onya_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret

      - name: Upload coverage reports
        if: matrix.service == 'shared-services'
        uses: codecov/codecov-action@v3
        with:
          file: ./services/shared-services/coverage/lcov.info
          flags: shared-services

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build and Test Docker Images
  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, security-scan]
    strategy:
      matrix:
        service: [shared-services, customer-bff, customer-app]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: |
            ${{ matrix.service == 'shared-services' && 'services/shared-services/Dockerfile' || 
                matrix.service == 'customer-bff' && 'bffs/customer-bff/Dockerfile' ||
                'apps/customer-app/Dockerfile' }}
          platforms: linux/amd64,linux/arm64
          push: false
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          SERVICE_NAME="${{ matrix.service }}"
          docker run --rm \
            --name test-${SERVICE_NAME} \
            -e NODE_ENV=test \
            ${{ env.REGISTRY }}/${{ github.repository }}/${SERVICE_NAME}:latest \
            sh -c "node --version && npm --version"

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: onya_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start services with Docker Compose
        run: |
          # Copy test environment configuration
          cp .env.test .env
          
          # Start the services
          docker-compose up -d --build
          
          # Wait for services to be ready
          sleep 30
          
          # Check service health
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3000/health
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3001/health

      - name: Run integration tests
        run: |
          cd tests/integration
          npm ci
          npm test
        env:
          SHARED_SERVICES_URL: http://localhost:3000
          CUSTOMER_BFF_URL: http://localhost:3001
          CUSTOMER_APP_URL: http://localhost:5173

      - name: Collect docker logs on failure
        if: failure()
        run: |
          docker-compose logs > docker-logs.txt
          cat docker-logs.txt

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            tests/integration/coverage/
            docker-logs.txt

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: |
          cd tests/e2e
          npm ci
          npx playwright install --with-deps

      - name: Start application stack
        run: |
          cp .env.test .env
          docker-compose up -d --build
          
          # Wait for services to be ready
          sleep 45
          
          # Verify all services are healthy
          curl --retry 15 --retry-delay 5 --retry-connrefused http://localhost:3000/health
          curl --retry 15 --retry-delay 5 --retry-connrefused http://localhost:3001/health
          curl --retry 15 --retry-delay 5 --retry-connrefused http://localhost:5173

      - name: Run Playwright tests
        run: |
          cd tests/e2e
          npx playwright test
        env:
          BASE_URL: http://localhost:5173
          API_URL: http://localhost:3001

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: tests/e2e/playwright-report/

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start application stack
        run: |
          cp .env.test .env
          docker-compose up -d --build
          sleep 45

      - name: Run performance tests
        run: |
          cd tests/performance
          k6 run --out json=results.json chat-flow.js
          k6 run --out json=auth-flow.json auth-flow.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: tests/performance/*.json

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Quality Gate Check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, security-scan, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint and TypeCheck: ${{ needs.lint-and-typecheck.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          
          if [ "${{ needs.lint-and-typecheck.result }}" != "success" ] || 
             [ "${{ needs.unit-tests.result }}" != "success" ] || 
             [ "${{ needs.security-scan.result }}" != "success" ] || 
             [ "${{ needs.integration-tests.result }}" != "success" ] || 
             [ "${{ needs.e2e-tests.result }}" != "success" ]; then
            echo "Quality gate failed!"
            exit 1
          fi
          echo "Quality gate passed!"

      - name: Post status to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Quality Gate Results')
            );
            
            const body = `## Quality Gate Results 🚦
            
            ✅ All checks passed! Ready for review.
            
            - ✅ Lint and Type Check
            - ✅ Unit Tests  
            - ✅ Security Scan
            - ✅ Integration Tests
            - ✅ End-to-End Tests
            
            Pipeline run: ${context.runId}`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }