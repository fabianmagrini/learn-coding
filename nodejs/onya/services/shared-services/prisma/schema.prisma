// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(CUSTOMER)
  tier      UserTier @default(BASIC)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  customerSessions ChatSession[] @relation("CustomerSessions")
  operatorSessions ChatSession[] @relation("OperatorSessions")
  messages         Message[]     @relation("UserMessages")
  operatorProfile  Operator?

  @@map("users")
}

model Operator {
  id           String          @id @default(uuid())
  userId       String          @unique
  status       OperatorStatus  @default(OFFLINE)
  skills       String[]        @default([])
  maxSessions  Int             @default(5)
  currentLoad  Int             @default(0)
  lastActiveAt DateTime        @default(now())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("operators")
}

// Chat Management
model ChatSession {
  id           String        @id @default(uuid())
  customerId   String
  operatorId   String?
  status       SessionStatus @default(ACTIVE)
  priority     Priority      @default(MEDIUM)
  subject      String?
  metadata     Json          @default("{}")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  closedAt     DateTime?

  customer User?      @relation("CustomerSessions", fields: [customerId], references: [id])
  operator User?      @relation("OperatorSessions", fields: [operatorId], references: [id])
  messages Message[]
  escalation Escalation?

  @@map("chat_sessions")
}

model Message {
  id        String      @id @default(uuid())
  sessionId String
  userId    String?
  content   String
  type      MessageType
  metadata  Json        @default("{}")
  createdAt DateTime    @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User?       @relation("UserMessages", fields: [userId], references: [id], map: "messages_user_fkey")

  @@map("messages")
}

// Escalation Management
model Escalation {
  id               String            @id @default(uuid())
  sessionId        String            @unique
  reason           String
  status           EscalationStatus  @default(PENDING)
  priority         Priority          @default(MEDIUM)
  queuePosition    Int?
  estimatedWaitTime Int?             // in minutes
  assignedAt       DateTime?
  resolvedAt       DateTime?
  feedback         Json?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("escalations")
}

// Analytics and Monitoring
model ChatMetrics {
  id                   String   @id @default(uuid())
  sessionId            String
  totalMessages        Int      @default(0)
  customerMessages     Int      @default(0)
  botMessages          Int      @default(0)
  operatorMessages     Int      @default(0)
  averageResponseTime  Float?   // in seconds
  customerSatisfaction Float?   // 1-5 rating
  resolutionTime       Int?     // in minutes
  escalated           Boolean  @default(false)
  resolved            Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("chat_metrics")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  details   Json     @default("{}")
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

// Enums
enum UserRole {
  CUSTOMER
  OPERATOR
  ADMIN
  SYSTEM
}

enum UserTier {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum OperatorStatus {
  ONLINE
  BUSY
  AWAY
  OFFLINE
}

enum SessionStatus {
  ACTIVE
  ESCALATED
  RESOLVED
  CLOSED
  ARCHIVED
}

enum MessageType {
  USER
  ASSISTANT
  SYSTEM
  OPERATOR
}

enum EscalationStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}